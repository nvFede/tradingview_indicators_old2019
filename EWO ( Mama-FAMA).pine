//@version=3

study("EWO (MAMA & FAMA)", shorttitle="MAMA&FAMA", overlay=false)

fastLimit = input(title="Fast Limit", type=float, defval=0.5)
slowLimit = input(title="Slow Limit", type=float, defval=0.05)
BaseLineVal = input(title="BaseLine Value", type=integer, defval=21)

applyFilling = input(title="Apply Ribbon Filling ?", type=bool, defval=false)
src = input(title="Source", type=source, defval=close)

// Truncated Hilbert transform
hilbertTransform(src) =>
    0.962 * src + 0.5769 * nz(src[2]) - 0.5769 * nz(src[4]) - 0.0962 * nz(src[6])

computeComponent(src, mesaPeriodMult) =>
    hilbertTransform(src) * mesaPeriodMult

computeAlpha(src, fastLimit, slowLimit) =>
    PI = 2 * asin(1)

    mesaPeriod = 0.0
    mesaPeriodMult = 0.075 * nz(mesaPeriod[1]) + 0.54
    
    smooth = 0.0
    smooth := (4 * src + 3 * nz(src[1]) + 2 * nz(src[2]) + nz(src[3])) / 10

    detrender = 0.0
    detrender := computeComponent(smooth, mesaPeriodMult)
    
    // Compute InPhase and Quadrature components
    I1 = nz(detrender[3])
    Q1 = computeComponent(detrender, mesaPeriodMult)
    
    // Advance the phase of I1 and Q1 by 90 degrees
    jI = computeComponent(I1, mesaPeriodMult)
    jQ = computeComponent(Q1, mesaPeriodMult)
    
    I2 = 0.0
    Q2 = 0.0
    
    // Phasor addition for 3 bar averaging
    I2 := I1 - jQ
    Q2 := Q1 + jI
    
    // Smooth the I and Q components before applying the discriminator
    I2 := 0.2 * I2 + 0.8 * nz(I2[1])
    Q2 := 0.2 * Q2 + 0.8 * nz(Q2[1])
    
    // Homodyne Discriminator
    Re = I2 * nz(I2[1]) + Q2 * nz(Q2[1])
    Im = I2 * nz(Q2[1]) - Q2 * nz(I2[1])
    
    Re := 0.2 * Re + 0.8 * nz(Re[1])
    Im := 0.2 * Im + 0.8 * nz(Im[1])
    
    if Re != 0 and Im != 0
        mesaPeriod := 2 * PI / atan(Im / Re)
    
    if mesaPeriod > 1.5 * nz(mesaPeriod[1])
        mesaPeriod := 1.5 * nz(mesaPeriod[1])
    
    if mesaPeriod < 0.67 * nz(mesaPeriod[1])
        mesaPeriod := 0.67 * nz(mesaPeriod[1])
    
    if mesaPeriod < 6
        mesaPeriod := 6
        
    if mesaPeriod > 50
        mesaPeriod := 50
    
    mesaPeriod := 0.2 * mesaPeriod + 0.8 * nz(mesaPeriod[1])
    
    smoothPeriod = 0.0
    smoothPeriod := 0.33 * mesaPeriod + 0.67 * nz(smoothPeriod[1])
    
    phase = 0.0
    
    if I1 != 0
        phase := (180 / PI) * atan(Q1 / I1)
    
    deltaPhase = nz(phase[1]) - phase
    
    if  deltaPhase < 1
        deltaPhase := 1
    
    alpha = fastLimit / deltaPhase
    
    if  alpha < slowLimit
        alpha := slowLimit

    alpha

mama(src, fastLimit, slowLimit) =>
    alpha = computeAlpha(src, fastLimit, slowLimit)

    mama = 0.0
    mama := alpha * src + (1 - alpha) * nz(mama[1])

fama(src, fastLimit, slowLimit) =>
    alpha = computeAlpha(src, fastLimit, slowLimit)
    mama = mama(src, fastLimit, slowLimit) 

    fama = 0.0
    fama := (alpha / 2) * mama + (1 - alpha / 2) * nz(fama[1])

mamaSeries = mama(src, fastLimit, slowLimit)
famaSeries = fama(src, fastLimit, slowLimit)


mamaTrend =   mamaSeries - famaSeries
mamaTrendColor = mamaTrend > 0 ? blue : red

mamaBaseline =  ema(mamaTrend, BaseLineVal)



wave = mamaTrend - mamaBaseline
waveColor = wave > 0 ? blue : red
emaLine = ema(wave, 13)
plot(wave, style=columns, color=waveColor)

plot(emaLine, color=yellow)

//mamaPlot = plot(mamaSeries, title="MAMA", linewidth=2, color=#674ea7, transp=0)
//famaPlot = plot(famaSeries, title="FAMA", linewidth=2, color=#f6b26b, transp=0)

//fillColor = applyFilling ? (mamaSeries > famaSeries ? #0ebb23 : #cc0000) : color(white, 100) 
//fill(mamaPlot, famaPlot, color=fillColor, transp=80)
